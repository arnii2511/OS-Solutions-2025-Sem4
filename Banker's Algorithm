#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, m, i, j, k, count = 0;
    printf("Enter number of processes and resources: ");
    scanf("%d %d", &n, &m);
    
    int alloc[n][m], max[n][m], avail[m], need[n][m], safeSeq[n], finish[n], work[m];
    
    printf("Enter allocation matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);
    
    printf("Enter max resources matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);
    
    printf("Enter available resources:\n");
    for (i = 0; i < m; i++)
        scanf("%d", &avail[i]);
    
    for (i = 0; i < n; i++) {
        finish[i] = 0;
        for (j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
    
    printf("Remaining need matrix is: ");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            printf("%d", need[i][j]);
    
    for (i = 0; i < m; i++) {
        work[i] = avail[i];
    }
    
    while (count < n) {
        int found = 0;
        for (i = 0; i < n; i++) {
            if (finish[i]==0) {
                for (j = 0; j < m; j++) {
                    if (need[i][j] > work[j])
                        break;
                }
                if (j == m) {
                    printf("Process P%d is executed. Available resources: ", i+1);
                    for (k = 0; k < m; k++) {
                        work[k] += alloc[i][k];
                        printf("%d ", work[k]);
                    }
                    printf("\n");
                    
                    safeSeq[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) {
            printf("System is in an unsafe state!\n");
            return 0;
        }
    }
    printf("\nSystem is in a safe state. Safe sequence: ");
    for (i = 0; i < n; i++) {
        printf("P%d ", safeSeq[i]+1);
    }
    printf("\n");
    
    return 0;
}
